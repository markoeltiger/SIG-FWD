/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sig.view;

import com.sig.modle.invoiceHeader;
import com.sig.modle.invoiceLine;
import com.sig.view.AddInvoice;
import java.awt.Component;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LE
 */
public class InvoiceFram extends javax.swing.JFrame implements ActionListener {

   
    String filepathl;
    String filepathh;
    String id;
     public static boolean headerCheck;
    public  static boolean lineCheck;
    public InvoiceFram() {
        initComponents();
            System.out.println("mona");
            
    }
    public InvoiceFram(String filepathh,String filepathl) {
        
        this.filepathh = filepathh;
        this.filepathl = filepathl;
 
         
         System.out.println("mohamed");
       
        
        initComponents();
        fun();
        
    }
    public boolean test(){
    return headerCheck;
    }
    
       public boolean settest(boolean btats){
    return headerCheck=btats;
    }
       
        public boolean testline(){
    return lineCheck;
    }
    
       public boolean settestline(boolean btats2){
    return lineCheck=btats2;
    }
    
    private void fun (){
            
            invoiceHeader n1 = new invoiceHeader();
            n1.setfilepath(filepathh);
            ArrayList<invoiceHeader> all2 = new ArrayList<>();
            n1.ReadFileinvoiceHeader();
            all2 = n1.getHeader();
            
        ArrayList<invoiceLine> all3 = new ArrayList<>();
        invoiceLine n = new invoiceLine();
        n.setfilepath(filepathl);
        n.ReadFileinvoiceLines();
        all3 = n.getLines();
            for(int i=0 ; i<all2.size() ; i++)
            {
                float leangh = 0;
                for(int j=0 ; j<all3.size() ; j++)
                {
                    if(all3.get(j).getnumber() == all2.get(i).getNumber()){
                        leangh += (all3.get(j).getPrice()*all3.get(j).getCount()) ; 
                    }
                }
                DefaultTableModel model1;
            model1 = (DefaultTableModel)invoiceHeadertbl.getModel();
                model1.addRow(new Object [] { all2.get(i).getNumber(),all2.get(i).getInvDate(),all2.get(i).getCustomer(),leangh});
            }
            DefaultTableModel model;
            model = (DefaultTableModel)invoiceLinetbl.getModel();
            jLabel5.setText(( invoiceHeadertbl.getValueAt(0, 0)).toString());
            jLabel6.setText((invoiceHeadertbl.getValueAt(0, 1)).toString());
            jLabel7.setText((invoiceHeadertbl.getValueAt(0, 2)).toString());
            jLabel8.setText((invoiceHeadertbl.getValueAt(0, 3)).toString());
            for(int i=0 ; i<all3.size() ; i++)
            {
              
                if(all3.get(i).getnumber() == 1){

                    model.addRow(new Object [] { all3.get(i).getnumber(),all3.get(i).getItem(),all3.get(i).getPrice(),all3.get(i).getCount(),all3.get(i).getPrice()*all3.get(i).getCount()});
                }
            }
          
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceHeadertbl = new javax.swing.JTable();
        CreateInvoicebtn = new javax.swing.JButton();
        DeleteInvoicebtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceLinetbl = new javax.swing.JTable();
        createLinebtn = new javax.swing.JButton();
        DeleteLinebtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        SaveFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        invoiceHeadertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ));
        invoiceHeadertbl.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                invoiceHeadertblAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        invoiceHeadertbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoiceHeadertblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(invoiceHeadertbl);

        CreateInvoicebtn.setText("new invoice");
        CreateInvoicebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateInvoicebtnActionPerformed(evt);
            }
        });

        DeleteInvoicebtn.setText("Delete invoice");
        DeleteInvoicebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteInvoicebtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Invoice Number");

        jLabel2.setText("Invoice Date");

        jLabel3.setText("Customer Name");

        jLabel4.setText("Invoice Total");

        invoiceLinetbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Item Name", "Item Price", "Count", "Itam Total"
            }
        ));
        invoiceLinetbl.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                invoiceLinetblAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(invoiceLinetbl);

        createLinebtn.setText("new line");
        createLinebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createLinebtnActionPerformed(evt);
            }
        });

        DeleteLinebtn.setText("Delete line");
        DeleteLinebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteLinebtnActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Open Files");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        SaveFile.setText("Save");
        SaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileActionPerformed(evt);
            }
        });
        jMenu1.add(SaveFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(CreateInvoicebtn)
                        .addGap(29, 29, 29)
                        .addComponent(DeleteInvoicebtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createLinebtn)
                        .addGap(30, 30, 30)
                        .addComponent(DeleteLinebtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateInvoicebtn)
                    .addComponent(DeleteInvoicebtn))
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createLinebtn)
                    .addComponent(DeleteLinebtn))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
     
        
        JFileChooser fc=new JFileChooser();    
        int k=fc.showOpenDialog(this);    
        if(k==JFileChooser.APPROVE_OPTION){ 
            File f=fc.getSelectedFile();    
            filepathh=f.getPath();
          
            invoiceHeader n = new invoiceHeader();
            n.setfilepath(filepathh);
            ArrayList<invoiceHeader> all3 = new ArrayList<>();
            n.ReadFileinvoiceHeader();
            all3 = n.getHeader();
            for(int i=0 ; i<all3.size() ; i++)
            {
                

                DefaultTableModel model = (DefaultTableModel)invoiceHeadertbl.getModel();
                model.addRow(new Object [] { all3.get(i).getNumber(),all3.get(i).getInvDate(),all3.get(i).getCustomer(),0 });
 
                
            }
        }
        
       
          JFileChooser fc2=new JFileChooser();    
        int k2=fc2.showOpenDialog(this);    
        if(k2==JFileChooser.APPROVE_OPTION){    
            File f=fc2.getSelectedFile();    
            filepathl=f.getPath();
          
            invoiceLine s = new invoiceLine();
            s.setfilepath(filepathl);
            s.ReadFileinvoiceLines();
            ArrayList<invoiceLine> all2 = new ArrayList<>();
            all2= s.getLines();
            invoiceHeader n = new invoiceHeader();
            n.setfilepath(filepathh);
            ArrayList<invoiceHeader> all3 = new ArrayList<>();
            n.ReadFileinvoiceHeader();
            all3 = n.getHeader();
            DefaultTableModel model = (DefaultTableModel)invoiceHeadertbl.getModel();
            model.setRowCount(0);
            for(int i=0 ; i<all3.size() ; i++)
            {
                float leangh = 0;
                for(int j=0 ; j<all2.size() ; j++)
                {
                    if(all2.get(j).getnumber() == all3.get(i).getNumber()){
                        leangh += (all2.get(j).getPrice()*all2.get(j).getCount()) ; 
                    }
                }

                model.addRow(new Object [] { all3.get(i).getNumber(),all3.get(i).getInvDate(),all3.get(i).getCustomer(),leangh });
                
            }
        }
          System.out.println("files read");
    
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void CreateInvoicebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateInvoicebtnActionPerformed
        AddInvoice A = new AddInvoice(filepathh,filepathl);
        A.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_CreateInvoicebtnActionPerformed

    public JButton getCreateInvoicebtn() {
        return CreateInvoicebtn;
    }

    public void setCreateInvoicebtn(JButton CreateInvoicebtn) {
        this.CreateInvoicebtn = CreateInvoicebtn;
    }

    public JButton getDeleteInvoicebtn() {
        return DeleteInvoicebtn;
    }

    public void setDeleteInvoicebtn(JButton DeleteInvoicebtn) {
        this.DeleteInvoicebtn = DeleteInvoicebtn;
    }

    public JButton getDeleteLinebtn() {
        return DeleteLinebtn;
    }

    public void setDeleteLinebtn(JButton DeleteLinebtn) {
        this.DeleteLinebtn = DeleteLinebtn;
    }

    public JButton getCreateLinebtn() {
        return createLinebtn;
    }

    public void setCreateLinebtn(JButton createLinebtn) {
        this.createLinebtn = createLinebtn;
    }

  
    public JTable getInvoiceHeadertbl() {
        return invoiceHeadertbl;
    }

    public void setInvoiceHeadertbl(JTable invoiceHeadertbl) {
        this.invoiceHeadertbl = invoiceHeadertbl;
    }

    public JTable getInvoiceLinetbl() {
        return invoiceLinetbl;
    }

    public void setInvoiceLinetbl(JTable invoiceLinetbl) {
        this.invoiceLinetbl = invoiceLinetbl;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JMenu getjMenu1() {
        return jMenu1;
    }

    public void setjMenu1(JMenu jMenu1) {
        this.jMenu1 = jMenu1;
    }

    public JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    public void setjMenuBar1(JMenuBar jMenuBar1) {
        this.jMenuBar1 = jMenuBar1;
    }

    public JMenuItem getjMenuItem1() {
        return jMenuItem1;
    }

    public void setjMenuItem1(JMenuItem jMenuItem1) {
        this.jMenuItem1 = jMenuItem1;
    }



    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    public void setjScrollPane2(JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    private void DeleteInvoicebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteInvoicebtnActionPerformed

     int row = invoiceHeadertbl.getSelectedRow();
        int col = 0;
       
        if(invoiceHeadertbl.getSelectedRow()!= -1){
        int value = (int) invoiceHeadertbl.getModel().getValueAt(row, col);
        ArrayList<invoiceHeader> all3 = new ArrayList<>();
        invoiceHeader n = new invoiceHeader();
        n.setfilepath(filepathh);
             ArrayList<invoiceLine> all2 = new ArrayList<>();
        invoiceLine s = new invoiceLine();
        s.setfilepath(filepathl);
        s.ReadFileinvoiceLines();
          s.WriteFileinvoiceLines();
        n.ReadFileinvoiceHeader();
         n.WriteFileinvoiceHeader(); 

        if(headerCheck==false && lineCheck ==false){
        
       
   
        all2 = s.getLines();
        ArrayList<Integer> a = new ArrayList<>();
        for (int i = 0 ; i<all2.size();i++)
        {
            if(all2.get(i).getnumber() == value) {
                a.add(i);
                
            }
        }
        for (int i = ((a.size())-1) ; i>=0;i--)
        {
         
            int x = a.get(i); 
            all2.remove(x);
        }
        
        s.setLines(all2);
        s.WriteFileinvoiceLines();
        
         all3 = n.getHeader();
        for (int i = 0 ; i<all3.size();i++)
        {
            if(all3.get(i).getNumber() == value) {
                all3.remove(i);  
            }
        }
        n.setHeader(all3);
        n.WriteFileinvoiceHeader(); 
        
        
        DefaultTableModel model = (DefaultTableModel)invoiceLinetbl.getModel();
        model.setRowCount(0);
        DefaultTableModel model1 = (DefaultTableModel)invoiceHeadertbl.getModel();
        model1.setRowCount(0);
        this.setVisible(false);
        this.setVisible(true);
        fun();
        }
        else{
    
              headerCheck =false;
              lineCheck =false;

        }
       

        }
        else{
            JOptionPane.showMessageDialog(this, "please select invoice header first", "Invalid selection", JOptionPane.ERROR_MESSAGE);
        }
        
            
    }//GEN-LAST:event_DeleteInvoicebtnActionPerformed

    private void invoiceHeadertblAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_invoiceHeadertblAncestorAdded
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_invoiceHeadertblAncestorAdded

    private void createLinebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createLinebtnActionPerformed
        // TODO add your handling code here:]
           int row = invoiceHeadertbl.getSelectedRow();
        int col = 0;
        if (invoiceHeadertbl.getSelectedRow()!= -1){
        String value =  (invoiceHeadertbl.getModel().getValueAt(row, col)).toString();
        this.id = value;
        AddLine A = new AddLine(filepathh,filepathl,id);
        A.setVisible(true);
        this.setVisible(false);}
        else {
            JOptionPane.showMessageDialog(this, "please select invoice header first", "Invalid selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createLinebtnActionPerformed

    private void invoiceLinetblAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_invoiceLinetblAncestorAdded
        // TODO add your handling code here:
//        ArrayList<invoiceLine> all3 = new ArrayList<>();
//        invoiceLine n = new invoiceLine();
//        n.ReadFileinvoiceLines();
//        all3 = n.getLines();
//        for(int i=0 ; i<all3.size() ; i++)
//        {
//            if(all3.get(i).getnumber() == 1){
//                jLabel5.setText(( invoiceHeadertbl.getValueAt(0, 0)).toString());
//                jLabel6.setText((invoiceHeadertbl.getValueAt(0, 1)).toString());
//                jLabel7.setText((invoiceHeadertbl.getValueAt(0, 2)).toString());
//                jLabel8.setText((invoiceHeadertbl.getValueAt(0, 3)).toString());
//                DefaultTableModel model = (DefaultTableModel)invoiceLinetbl.getModel();
//                model.addRow(new Object [] { all3.get(i).getnumber(),all3.get(i).getItem(),all3.get(i).getPrice(),all3.get(i).getCount(),all3.get(i).getPrice()*all3.get(i).getCount()});
//            }
//        }
    }//GEN-LAST:event_invoiceLinetblAncestorAdded

    private void DeleteLinebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteLinebtnActionPerformed
        // TODO add your handling code here:
        int row = invoiceLinetbl.getSelectedRow();
        int col = 1;
        if(invoiceLinetbl.getSelectedRow()!= -1){
        String value = (invoiceLinetbl.getModel().getValueAt(row, col)).toString();
        ArrayList<invoiceLine> all3 = new ArrayList<>();
        invoiceLine n = new invoiceLine();
        n.setfilepath(filepathl);
        n.ReadFileinvoiceLines();
        all3 = n.getLines();
        for (int i = 0 ; i<all3.size();i++)
        {
            if(all3.get(i).getItem().equals(value)) {
                all3.remove(i);
                
            }
        }
        n.setLines(all3);
        n.WriteFileinvoiceLines();
        DefaultTableModel model = (DefaultTableModel)invoiceLinetbl.getModel();
        model.setRowCount(0);
        DefaultTableModel model1 = (DefaultTableModel)invoiceHeadertbl.getModel();
        model1.setRowCount(0);
        this.setVisible(false);
        this.setVisible(true);
        fun();
        }
        else{
            JOptionPane.showMessageDialog(this, "please select invoice Line first", "Invalid selection", JOptionPane.ERROR_MESSAGE);
        }
         System.out.println("files Save");
    }//GEN-LAST:event_DeleteLinebtnActionPerformed

    private void SaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fc=new JFileChooser();    
        int k=fc.showOpenDialog(this);    
        if(k==JFileChooser.APPROVE_OPTION){ 
            File f=fc.getSelectedFile();
            String file;
            file=f.getPath();
            invoiceHeader n = new invoiceHeader();
            n.setfilepath(filepathh);
            ArrayList<invoiceHeader> all3 = new ArrayList<>();
            n.ReadFileinvoiceHeader();
            n.setfilepath(file);
            all3 = n.getHeader();
            n.setHeader(all3);
        n.WriteFileinvoiceHeader();
        
         
        }
        
            JFileChooser fh=new JFileChooser();    
        int k2=fh.showOpenDialog(this);    
        if(k2==JFileChooser.APPROVE_OPTION){ 
            File f2=fh.getSelectedFile();
            String fil;
            fil=f2.getPath();
            invoiceLine n2 = new invoiceLine();
            n2.setfilepath(filepathl);
            ArrayList<invoiceLine> all4 = new ArrayList<>();
            n2.ReadFileinvoiceLines();
            n2.setfilepath(fil);
            all4 = n2.getLines();
            n2.setLines(all4);
        n2.WriteFileinvoiceLines();
         
        }
        
    }//GEN-LAST:event_SaveFileActionPerformed

    private void invoiceHeadertblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceHeadertblMouseClicked
        // TODO add your handling code here:
        DefaultTableModel modle = (DefaultTableModel)invoiceHeadertbl.getModel();
          int row = invoiceHeadertbl.getSelectedRow();
   if(invoiceHeadertbl.getSelectedRow()!= -1){
        int col = 0;
        int value = (int) invoiceHeadertbl.getModel().getValueAt(row, col); 
           System.out.println("Invoice selected: " + value );
        ArrayList<invoiceLine> all3 = new ArrayList<>();
        invoiceLine n = new invoiceLine();
        n.setfilepath(filepathl);
        n.ReadFileinvoiceLines();
        all3 = n.getLines();
         DefaultTableModel model = (DefaultTableModel)invoiceLinetbl.getModel();
        model.setRowCount(0);
      
        System.out.println("{invoiceHeader id is "+ ( invoiceHeadertbl.getValueAt(row, 0)).toString()+
                " invoiceHeader Date is "+ ( invoiceHeadertbl.getValueAt(row, 1)).toString()+
                " invoiceHeader Customer Name is "+ ( invoiceHeadertbl.getValueAt(row, 2)).toString()+
                " invoiceHeader Total is "+ ( invoiceHeadertbl.getValueAt(row, 3)).toString()+ " }"
                
        );
        jLabel5.setText(( modle.getValueAt(row, 0)).toString());
        jLabel6.setText((modle.getValueAt(row, 1)).toString());
        jLabel7.setText((modle.getValueAt(row, 2)).toString());
        jLabel8.setText((modle.getValueAt(row, 3)).toString());
     System.out.println("the invoice line data is ");
        for(int i=0 ; i<all3.size() ; i++)
        {
            if(all3.get(i).getnumber() == value){
                
                model.addRow(new Object [] { all3.get(i).getnumber(),all3.get(i).getItem(),all3.get(i).getPrice(),all3.get(i).getCount(),all3.get(i).getlineTotal()});
               
                System.out.println(
                              "{invoiceline number is " + all3.get(i).getnumber() +
                               " invoiceline items is " +all3.get(i).getItem()+ " invoiceline price is "+ all3.get(i).getPrice() +
                               " invoiceline count is " + all3.get(i).getCount()+
                               " invoiceline total is "+all3.get(i).getlineTotal() + " }");
            }
        }
   }
   else{
       JOptionPane.showMessageDialog(this, "please select invoice header first", "Invalid selection", JOptionPane.ERROR_MESSAGE);
   }
    }//GEN-LAST:event_invoiceHeadertblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceFram().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateInvoicebtn;
    private javax.swing.JButton DeleteInvoicebtn;
    private javax.swing.JButton DeleteLinebtn;
    private javax.swing.JMenuItem SaveFile;
    private javax.swing.JButton createLinebtn;
    private javax.swing.JTable invoiceHeadertbl;
    private javax.swing.JTable invoiceLinetbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
      JOptionPane.showMessageDialog(null, "add your header first", "INFORMATION_MESSAGE",JOptionPane.INFORMATION_MESSAGE);
    }
}
